#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2019-2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import os
import re
import signal
import sys
import time

0_0  # Python >= 3.6 is required

def parse_time(s):
    item_re = '[0-9]+[smhd]'
    if not re.fullmatch(f'({item_re})+', s):
        raise ValueError
    dt = 0
    for item in re.findall(item_re, s):
        n = int(item[:-1])
        unit = item[-1]
        dt += n * dict(
            d = 24 * 60 * 60,
            h =      60 * 60,
            m =           60,
            s =            1,
        )[unit]
    return dt
parse_time.__name__ = 'time'

def get_time():
    return time.clock_gettime(time.CLOCK_MONOTONIC)

def fmt_time(t):
    t = round(t)
    m, s = divmod(t, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    r = ''
    if d:
        r += f'{d}d'
    if h:
        r += f'{h}h'
    if m:
        r += f'{m}m'
    if s or (t == 0):
        r += f'{s}s'
    return r

def wait(timeout):
    def eprint(*args, **kwargs):
        print(*args, **kwargs, end='', file=sys.stderr, flush=True)
    tm_start = get_time()
    tm_end = tm_start + timeout
    while True:
        tm_rem = tm_end - get_time()
        if tm_rem <= 0:
            break
        eprint('\r\033[2K', fmt_time(tm_rem), sep='')
        tm_sleep = tm_rem % 1
        if tm_sleep == 0:
            tm_sleep = 1
        time.sleep(tm_sleep)
    eprint('\r\033[2K')

def execvp(*cmdline):
    os.execvp(cmdline[0], cmdline)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('timeout', metavar='TIME', type=parse_time)
    ap.add_argument('cmd', metavar='COMMAND', nargs='?')
    ap.add_argument('args', metavar='ARGS', nargs=argparse.REMAINDER, help=argparse.SUPPRESS)
    opts = ap.parse_args()
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    wait(opts.timeout)
    cmd = []
    if opts.cmd is not None:
        cmd = [opts.cmd, *opts.args]
    if not cmd:
        print('\a')
        return
    try:
        os.execvp(cmd[0], cmd)
    except FileNotFoundError as exc:
        if exc.filename is None:
            exc.filename = cmd[0]
        raise

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
